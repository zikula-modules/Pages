<?php

/**
 * Pages.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 *
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\PagesModule\Form\Type\Finder\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SearchType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Translation\Extractor\Annotation\Ignore;
use Zikula\Bundle\FormExtensionBundle\Form\Type\LocaleType;
use Zikula\CategoriesModule\Form\Type\CategoriesType;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\PagesModule\Helper\FeatureActivationHelper;

/**
 * Page finder form type base class.
 */
abstract class AbstractPageFinderType extends AbstractType
{
    /**
     * @var RequestStack
     */
    protected $requestStack;

    /**
     * @var VariableApiInterface
     */
    protected $variableApi;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    public function __construct(
        
        RequestStack $requestStack,
        VariableApiInterface $variableApi,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->requestStack = $requestStack;
        $this->variableApi = $variableApi;
        $this->featureActivationHelper = $featureActivationHelper;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->setMethod('GET')
            ->add('objectType', HiddenType::class, [
                'data' => $options['object_type'],
            ])
            ->add('editor', HiddenType::class, [
                'data' => $options['editor_name'],
            ])
        ;

        if ($this->variableApi->getSystemVar('multilingual')) {
            $this->addLanguageField($builder, $options);
        }
        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $options['object_type'])) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addPasteAsField($builder, $options);
        $this->addSortingFields($builder, $options);
        $this->addAmountField($builder, $options);
        $this->addSearchField($builder, $options);

        $builder
            ->add('update', SubmitType::class, [
                'label' => 'Change selection',
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn-success',
                ],
            ])
            ->add('cancel', SubmitType::class, [
                'label' => 'Cancel',
                'validate' => false,
                'icon' => 'fa-times',
            ])
        ;
    }

    /**
     * Adds a language field.
     */
    public function addLanguageField(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('language', LocaleType::class, [
            'label' => 'Language:',
            'data' => $this->requestStack->getCurrentRequest()->getLocale(),
            'empty_data' => null,
            'multiple' => false,
            'expanded' => false,
        ]);
    }

    /**
     * Adds a categories field.
     */
    public function addCategoriesField(FormBuilderInterface $builder, array $options = []): void
    {
        $entityCategoryClass = 'Zikula\PagesModule\Entity\\' . ucfirst($options['object_type']) . 'CategoryEntity';
        $builder->add('categories', CategoriesType::class, [
            'label' => 'Category:',
            'empty_data' => null,
            'attr' => [
                'class' => 'category-selector',
                'title' => 'This is an optional filter.',
            ],
            'help' => 'This is an optional filter.',
            'required' => false,
            'multiple' => false,
            'module' => 'ZikulaPagesModule',
            'entity' => ucfirst($options['object_type']) . 'Entity',
            'entityCategoryClass' => $entityCategoryClass,
            'showRegistryLabels' => true,
        ]);
    }

    /**
     * Adds a "paste as" field.
     */
    public function addPasteAsField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('pasteAs', ChoiceType::class, [
            'label' => 'Paste as:',
            'empty_data' => 1,
            'choices' => [
                'Relative link to the page' => 1,
                'Absolute url to the page' => 2,
                'ID of page' => 3,
            ],
            'multiple' => false,
            'expanded' => false,
        ]);
    }

    /**
     * Adds sorting fields.
     */
    public function addSortingFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder
            ->add('sort', ChoiceType::class, [
                'label' => 'Sort by:',
                'empty_data' => '',
                'choices' => [
                    'Title' => 'title',
                    'Page language' => 'pageLanguage',
                    'Content' => 'content',
                    'Counter' => 'counter',
                    'Active' => 'active',
                    'Display wrapper' => 'displayWrapper',
                    'Display title' => 'displayTitle',
                    'Display created' => 'displayCreated',
                    'Display updated' => 'displayUpdated',
                    'Display text info' => 'displayTextInfo',
                    'Display print' => 'displayPrint',
                    'Creation date' => 'createdDate',
                    'Creator' => 'createdBy',
                    'Update date' => 'updatedDate',
                    'Updater' => 'updatedBy',
                ],
                'multiple' => false,
                'expanded' => false,
            ])
            ->add('sortdir', ChoiceType::class, [
                'label' => 'Sort direction:',
                'empty_data' => 'asc',
                'choices' => [
                    'Ascending' => 'asc',
                    'Descending' => 'desc',
                ],
                'multiple' => false,
                'expanded' => false,
            ])
        ;
    }

    /**
     * Adds a page size field.
     */
    public function addAmountField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('num', ChoiceType::class, [
            'label' => 'Page size:',
            'empty_data' => 20,
            'attr' => [
                'class' => 'text-right',
            ],
            /** @Ignore */
            'choices' => [
                5 => 5,
                10 => 10,
                15 => 15,
                20 => 20,
                30 => 30,
                50 => 50,
                100 => 100,
            ],
            'multiple' => false,
            'expanded' => false,
        ]);
    }

    /**
     * Adds a search field.
     */
    public function addSearchField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('q', SearchType::class, [
            'label' => 'Search for:',
            'required' => false,
            'attr' => [
                'maxlength' => 255,
            ],
        ]);
    }

    public function getBlockPrefix()
    {
        return 'zikulapagesmodule_pagefinder';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                'object_type' => 'page',
                'editor_name' => 'ckeditor',
                'translation_domain' => 'page',
            ])
            ->setRequired(['object_type', 'editor_name'])
            ->setAllowedTypes('object_type', 'string')
            ->setAllowedTypes('editor_name', 'string')
            ->setAllowedValues('editor_name', ['ckeditor', 'quill', 'summernote', 'tinymce'])
        ;
    }
}
