<?php

/**
 * Pages.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\PagesModule\Base;

use Doctrine\Persistence\ManagerRegistry;
use Exception;
use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Bundle\CoreBundle\Doctrine\Helper\SchemaHelper;
use Zikula\CategoriesModule\Api\CategoryPermissionApi;
use Zikula\CategoriesModule\Entity\CategoryRegistryEntity;
use Zikula\CategoriesModule\Entity\RepositoryInterface\CategoryRegistryRepositoryInterface;
use Zikula\CategoriesModule\Entity\RepositoryInterface\CategoryRepositoryInterface;
use Zikula\ExtensionsModule\AbstractExtension;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\ExtensionsModule\Installer\AbstractExtensionInstaller;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Zikula\PagesModule\Entity\PageEntity;
use Zikula\PagesModule\Entity\PageCategoryEntity;

/**
 * Installer base class.
 */
abstract class AbstractPagesModuleInstaller extends AbstractExtensionInstaller
{
    /**
     * @var string[]
     */
    protected $entities = [
        PageEntity::class,
        PageCategoryEntity::class,
    ];
    
    /**
     * @var LoggerInterface
     */
    protected $logger;
    
    /**
     * @var CurrentUserApiInterface
     */
    protected $currentUserApi;
    
    /**
     * @var CategoryRepositoryInterface
     */
    protected $categoryRepository;
    
    /**
     * @var CategoryRegistryRepositoryInterface
     */
    protected $categoryRegistryRepository;
    
    /**
     * @var CategoryPermissionApi
     */
    protected $categoryPermissionApi;

    public function __construct(
        AbstractExtension $extension,
        ManagerRegistry $managerRegistry,
        SchemaHelper $schemaTool,
        RequestStack $requestStack,
        TranslatorInterface $translator,
        VariableApiInterface $variableApi,
        LoggerInterface $logger,
        CurrentUserApiInterface $currentUserApi,
        CategoryRepositoryInterface $categoryRepository,
        CategoryRegistryRepositoryInterface $categoryRegistryRepository,
        CategoryPermissionApi $categoryPermissionApi) {
        parent::__construct($extension, $managerRegistry, $schemaTool, $requestStack, $translator, $variableApi);
        $this->logger = $logger;
        $this->currentUserApi = $currentUserApi;
        $this->categoryRepository = $categoryRepository;
        $this->categoryRegistryRepository = $categoryRegistryRepository;
        $this->categoryPermissionApi = $categoryPermissionApi;
    }
    
    public function install(): bool
    {
        $userName = $this->currentUserApi->get('uname');
    
        // create all tables from according entity definitions
        try {
            $this->schemaTool->create($this->entities);
        } catch (Exception $exception) {
            $this->addFlash('error', $this->trans('Doctrine Exception') . ': ' . $exception->getMessage());
            $this->logger->error(
                '{app}: Could not create the database tables during installation. Error details: {errorMessage}.',
                ['app' => 'ZikulaPagesModule', 'errorMessage' => $exception->getMessage()]
            );
    
            throw $exception;
        }
    
        // set up all our vars with initial values
        $this->setVar('enableCategorisation', false);
        $this->setVar('displayWrapper', true);
        $this->setVar('displayTitle', true);
        $this->setVar('displayCreated', true);
        $this->setVar('displayUpdated', true);
        $this->setVar('displayTextInfo', true);
        $this->setVar('displayPrint', true);
        $this->setVar('pageEntriesPerPage', 10);
        $this->setVar('pagePrivateMode', false);
        $this->setVar('showOnlyOwnEntries', false);
        $this->setVar('filterDataByLocale', false);
        $this->setVar('allowModerationSpecificCreatorForPage', false);
        $this->setVar('allowModerationSpecificCreationDateForPage', false);
        $this->setVar('enabledFinderTypes', 'page');
    
        // add default entry for category registry (property named Main)
        $categoryHelper = new \Zikula\PagesModule\Helper\CategoryHelper(
            $this->getTranslator(),
            $this->requestStack,
            $this->logger,
            $this->currentUserApi,
            $this->categoryRegistryRepository,
            $this->categoryPermissionApi
        );
        $categoryGlobal = $this->categoryRepository->findOneBy(['name' => 'Global']);
        if ($categoryGlobal) {
            $categoryRegistryIdsPerEntity = [];
    
            $registry = new CategoryRegistryEntity();
            $registry->setModname('ZikulaPagesModule');
            $registry->setEntityname('PageEntity');
            $registry->setProperty($categoryHelper->getPrimaryProperty('Page'));
            $registry->setCategory($categoryGlobal);
    
            try {
                $this->entityManager->persist($registry);
                $this->entityManager->flush();
            } catch (Exception $exception) {
                $this->addFlash(
                    'warning',
                    $this->trans(
                        'Error! Could not create a category registry for the %entity% entity. If you want to use categorisation, register at least one registry in the Categories administration.',
                        ['%entity%' => 'page']
                    )
                );
            }
            $categoryRegistryIdsPerEntity['page'] = $registry->getId();
        }
    
        // initialisation successful
        return true;
    }
    
    public function upgrade(string $oldVersion): bool
    {
    /*
        // upgrade dependent on old version number
        switch ($oldVersion) {
            case '1.0.0':
                // do something
                // ...
                // update the database schema
                try {
                    $this->schemaTool->update($this->entities);
                } catch (Exception $exception) {
                    $this->addFlash('error', $this->trans('Doctrine Exception') . ': ' . $exception->getMessage());
                    $this->logger->error(
                        '{app}: Could not update the database tables during the upgrade.'
                            . ' Error details: {errorMessage}.',
                        ['app' => 'ZikulaPagesModule', 'errorMessage' => $exception->getMessage()]
                    );
    
                    throw $exception;
                }
        }
    */
    
        // update successful
        return true;
    }
    
    public function uninstall(): bool
    {
        try {
            $this->schemaTool->drop($this->entities);
        } catch (Exception $exception) {
            $this->addFlash('error', $this->trans('Doctrine Exception') . ': ' . $exception->getMessage());
            $this->logger->error(
                '{app}: Could not remove the database tables during uninstallation. Error details: {errorMessage}.',
                ['app' => 'ZikulaPagesModule', 'errorMessage' => $exception->getMessage()]
            );
    
            throw $exception;
        }
    
        // remove all module vars
        $this->delVars();
    
        // remove category registry entries
        $registries = $this->categoryRegistryRepository->findBy(['modname' => 'ZikulaPagesModule']);
        foreach ($registries as $registry) {
            $this->entityManager->remove($registry);
        }
        $this->entityManager->flush();
    
        // uninstallation successful
        return true;
    }
}
