<?php

/**
 * Pages.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 *
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\PagesModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\PagesModule\Validator\Constraints as PagesAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $enableCategorisation = false;
    
    /**
     * Display additional information
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayWrapper = true;
    
    /**
     * Display page title
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayTitle = true;
    
    /**
     * Display page creation date
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayCreated = true;
    
    /**
     * Display page update date
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayUpdated = true;
    
    /**
     * Display page text statistics
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayTextInfo = true;
    
    /**
     * Display page print link
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayPrint = true;
    
    /**
     * The amount of pages shown per page.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $pageEntriesPerPage = 10;
    
    /**
     * Whether users may only see own pages.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $pagePrivateMode = false;
    
    /**
     * Whether only own entries should be shown on view pages by default or not.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether automatically filter data in the frontend based on the current locale or not.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $filterDataByLocale = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $allowModerationSpecificCreatorForPage = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $allowModerationSpecificCreationDateForPage = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull
     * @PagesAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     *
     * @var string
     */
    protected $enabledFinderTypes = 'page';
    
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    public function getEnableCategorisation(): bool
    {
        return $this->enableCategorisation;
    }
    
    public function setEnableCategorisation(bool $enableCategorisation): void
    {
        if ((bool) $this->enableCategorisation !== $enableCategorisation) {
            $this->enableCategorisation = $enableCategorisation;
        }
    }
    
    public function getDisplayWrapper(): bool
    {
        return $this->displayWrapper;
    }
    
    public function setDisplayWrapper(bool $displayWrapper): void
    {
        if ((bool) $this->displayWrapper !== $displayWrapper) {
            $this->displayWrapper = $displayWrapper;
        }
    }
    
    public function getDisplayTitle(): bool
    {
        return $this->displayTitle;
    }
    
    public function setDisplayTitle(bool $displayTitle): void
    {
        if ((bool) $this->displayTitle !== $displayTitle) {
            $this->displayTitle = $displayTitle;
        }
    }
    
    public function getDisplayCreated(): bool
    {
        return $this->displayCreated;
    }
    
    public function setDisplayCreated(bool $displayCreated): void
    {
        if ((bool) $this->displayCreated !== $displayCreated) {
            $this->displayCreated = $displayCreated;
        }
    }
    
    public function getDisplayUpdated(): bool
    {
        return $this->displayUpdated;
    }
    
    public function setDisplayUpdated(bool $displayUpdated): void
    {
        if ((bool) $this->displayUpdated !== $displayUpdated) {
            $this->displayUpdated = $displayUpdated;
        }
    }
    
    public function getDisplayTextInfo(): bool
    {
        return $this->displayTextInfo;
    }
    
    public function setDisplayTextInfo(bool $displayTextInfo): void
    {
        if ((bool) $this->displayTextInfo !== $displayTextInfo) {
            $this->displayTextInfo = $displayTextInfo;
        }
    }
    
    public function getDisplayPrint(): bool
    {
        return $this->displayPrint;
    }
    
    public function setDisplayPrint(bool $displayPrint): void
    {
        if ((bool) $this->displayPrint !== $displayPrint) {
            $this->displayPrint = $displayPrint;
        }
    }
    
    public function getPageEntriesPerPage(): int
    {
        return $this->pageEntriesPerPage;
    }
    
    public function setPageEntriesPerPage(int $pageEntriesPerPage): void
    {
        if ((int) $this->pageEntriesPerPage !== $pageEntriesPerPage) {
            $this->pageEntriesPerPage = $pageEntriesPerPage;
        }
    }
    
    public function getPagePrivateMode(): bool
    {
        return $this->pagePrivateMode;
    }
    
    public function setPagePrivateMode(bool $pagePrivateMode): void
    {
        if ((bool) $this->pagePrivateMode !== $pagePrivateMode) {
            $this->pagePrivateMode = $pagePrivateMode;
        }
    }
    
    public function getShowOnlyOwnEntries(): bool
    {
        return $this->showOnlyOwnEntries;
    }
    
    public function setShowOnlyOwnEntries(bool $showOnlyOwnEntries): void
    {
        if ((bool) $this->showOnlyOwnEntries !== $showOnlyOwnEntries) {
            $this->showOnlyOwnEntries = $showOnlyOwnEntries;
        }
    }
    
    public function getFilterDataByLocale(): bool
    {
        return $this->filterDataByLocale;
    }
    
    public function setFilterDataByLocale(bool $filterDataByLocale): void
    {
        if ((bool) $this->filterDataByLocale !== $filterDataByLocale) {
            $this->filterDataByLocale = $filterDataByLocale;
        }
    }
    
    public function getAllowModerationSpecificCreatorForPage(): bool
    {
        return $this->allowModerationSpecificCreatorForPage;
    }
    
    public function setAllowModerationSpecificCreatorForPage(bool $allowModerationSpecificCreatorForPage): void
    {
        if ((bool) $this->allowModerationSpecificCreatorForPage !== $allowModerationSpecificCreatorForPage) {
            $this->allowModerationSpecificCreatorForPage = $allowModerationSpecificCreatorForPage;
        }
    }
    
    public function getAllowModerationSpecificCreationDateForPage(): bool
    {
        return $this->allowModerationSpecificCreationDateForPage;
    }
    
    public function setAllowModerationSpecificCreationDateForPage(bool $allowModerationSpecificCreationDateForPage): void
    {
        if ((bool) $this->allowModerationSpecificCreationDateForPage !== $allowModerationSpecificCreationDateForPage) {
            $this->allowModerationSpecificCreationDateForPage = $allowModerationSpecificCreationDateForPage;
        }
    }
    
    public function getEnabledFinderTypes(): string
    {
        return $this->enabledFinderTypes;
    }
    
    public function setEnabledFinderTypes(string $enabledFinderTypes): void
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = $enabledFinderTypes ?? '';
        }
    }
    
    /**
     * Loads module variables from the database.
     */
    protected function load(): void
    {
        $moduleVars = $this->variableApi->getAll('ZikulaPagesModule');
    
        if (isset($moduleVars['enableCategorisation'])) {
            $this->setEnableCategorisation($moduleVars['enableCategorisation']);
        }
        if (isset($moduleVars['displayWrapper'])) {
            $this->setDisplayWrapper($moduleVars['displayWrapper']);
        }
        if (isset($moduleVars['displayTitle'])) {
            $this->setDisplayTitle($moduleVars['displayTitle']);
        }
        if (isset($moduleVars['displayCreated'])) {
            $this->setDisplayCreated($moduleVars['displayCreated']);
        }
        if (isset($moduleVars['displayUpdated'])) {
            $this->setDisplayUpdated($moduleVars['displayUpdated']);
        }
        if (isset($moduleVars['displayTextInfo'])) {
            $this->setDisplayTextInfo($moduleVars['displayTextInfo']);
        }
        if (isset($moduleVars['displayPrint'])) {
            $this->setDisplayPrint($moduleVars['displayPrint']);
        }
        if (isset($moduleVars['pageEntriesPerPage'])) {
            $this->setPageEntriesPerPage($moduleVars['pageEntriesPerPage']);
        }
        if (isset($moduleVars['pagePrivateMode'])) {
            $this->setPagePrivateMode($moduleVars['pagePrivateMode']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['filterDataByLocale'])) {
            $this->setFilterDataByLocale($moduleVars['filterDataByLocale']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForPage'])) {
            $this->setAllowModerationSpecificCreatorForPage($moduleVars['allowModerationSpecificCreatorForPage']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForPage'])) {
            $this->setAllowModerationSpecificCreationDateForPage($moduleVars['allowModerationSpecificCreationDateForPage']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save(): void
    {
        $this->variableApi->set('ZikulaPagesModule', 'enableCategorisation', $this->getEnableCategorisation());
        $this->variableApi->set('ZikulaPagesModule', 'displayWrapper', $this->getDisplayWrapper());
        $this->variableApi->set('ZikulaPagesModule', 'displayTitle', $this->getDisplayTitle());
        $this->variableApi->set('ZikulaPagesModule', 'displayCreated', $this->getDisplayCreated());
        $this->variableApi->set('ZikulaPagesModule', 'displayUpdated', $this->getDisplayUpdated());
        $this->variableApi->set('ZikulaPagesModule', 'displayTextInfo', $this->getDisplayTextInfo());
        $this->variableApi->set('ZikulaPagesModule', 'displayPrint', $this->getDisplayPrint());
        $this->variableApi->set('ZikulaPagesModule', 'pageEntriesPerPage', $this->getPageEntriesPerPage());
        $this->variableApi->set('ZikulaPagesModule', 'pagePrivateMode', $this->getPagePrivateMode());
        $this->variableApi->set('ZikulaPagesModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('ZikulaPagesModule', 'filterDataByLocale', $this->getFilterDataByLocale());
        $this->variableApi->set('ZikulaPagesModule', 'allowModerationSpecificCreatorForPage', $this->getAllowModerationSpecificCreatorForPage());
        $this->variableApi->set('ZikulaPagesModule', 'allowModerationSpecificCreationDateForPage', $this->getAllowModerationSpecificCreationDateForPage());
        $this->variableApi->set('ZikulaPagesModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
