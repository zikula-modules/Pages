<?php

/**
 * Pages.
 *
 * @copyright Zikula Team (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula Team <info@ziku.la>.
 *
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\PagesModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Zikula\PagesModule\Traits\StandardFieldsTrait;
use Zikula\PagesModule\Validator\Constraints as PagesAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for page entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractPageEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'page';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThan(value=1000000000)
     *
     * @var int
     */
    protected $id = 0;
    
    /**
     * The current workflow state.
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @PagesAssert\ListEntry(entityName="page", propertyName="workflowState", multiple=false)
     *
     * @var string
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     *
     * @var string
     */
    protected $title = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     *
     * @var string
     */
    protected $metaDescription = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull
     * @Assert\Length(min="0", max="255", allowEmptyString="true")
     * @Assert\Locale
     *
     * @var string
     */
    protected $pageLanguage = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="2000", allowEmptyString="false")
     *
     * @var string
     */
    protected $content = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThan(value=100000000000)
     *
     * @var int
     */
    protected $counter = 0;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $active = true;
    
    /**
     * Display additional information.
     *
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayWrapper = true;
    
    /**
     * Display page title.
     *
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayTitle = true;
    
    /**
     * Display page creation date.
     *
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayCreated = true;
    
    /**
     * Display page update date.
     *
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayUpdated = true;
    
    /**
     * Display page text statistics.
     *
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayTextInfo = true;
    
    /**
     * Display page print link.
     *
     * @ORM\Column(type="boolean")
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     *
     * @var bool
     */
    protected $displayPrint = true;
    
    /**
     * @Gedmo\Slug(fields={"title"}, updatable=true, unique=true, separator="-", style="lower")
     * @ORM\Column(type="string", length=255, unique=true)
     * @Assert\Length(min="1", max="255")
     *
     * @var string
     */
    protected $slug;
    
    /**
     * @ORM\OneToMany(targetEntity="\Zikula\PagesModule\Entity\PageCategoryEntity",
     *                mappedBy="entity", cascade={"all"},
     *                orphanRemoval=true
     * )
     *
     * @var \Zikula\PagesModule\Entity\PageCategoryEntity
     */
    protected $categories = null;
    
    
    /**
     * PageEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->categories = new ArrayCollection();
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): void
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(?int $id = null): void
    {
        if ((int) $this->id !== $id) {
            $this->id = $id;
        }
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): void
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    }
    
    public function getTitle(): string
    {
        return $this->title;
    }
    
    public function setTitle(string $title): void
    {
        if ($this->title !== $title) {
            $this->title = $title ?? '';
        }
    }
    
    public function getMetaDescription(): string
    {
        return $this->metaDescription;
    }
    
    public function setMetaDescription(string $metaDescription): void
    {
        if ($this->metaDescription !== $metaDescription) {
            $this->metaDescription = $metaDescription ?? '';
        }
    }
    
    public function getPageLanguage(): string
    {
        return $this->pageLanguage;
    }
    
    public function setPageLanguage(string $pageLanguage): void
    {
        if ($this->pageLanguage !== $pageLanguage) {
            $this->pageLanguage = $pageLanguage ?? '';
        }
    }
    
    public function getContent(): string
    {
        return $this->content;
    }
    
    public function setContent(string $content): void
    {
        if ($this->content !== $content) {
            $this->content = $content ?? '';
        }
    }
    
    public function getCounter(): int
    {
        return $this->counter;
    }
    
    public function setCounter(int $counter): void
    {
        if ((int) $this->counter !== $counter) {
            $this->counter = $counter;
        }
    }
    
    public function getActive(): bool
    {
        return $this->active;
    }
    
    public function setActive(bool $active): void
    {
        if ((bool) $this->active !== $active) {
            $this->active = $active;
        }
    }
    
    public function getDisplayWrapper(): bool
    {
        return $this->displayWrapper;
    }
    
    public function setDisplayWrapper(bool $displayWrapper): void
    {
        if ((bool) $this->displayWrapper !== $displayWrapper) {
            $this->displayWrapper = $displayWrapper;
        }
    }
    
    public function getDisplayTitle(): bool
    {
        return $this->displayTitle;
    }
    
    public function setDisplayTitle(bool $displayTitle): void
    {
        if ((bool) $this->displayTitle !== $displayTitle) {
            $this->displayTitle = $displayTitle;
        }
    }
    
    public function getDisplayCreated(): bool
    {
        return $this->displayCreated;
    }
    
    public function setDisplayCreated(bool $displayCreated): void
    {
        if ((bool) $this->displayCreated !== $displayCreated) {
            $this->displayCreated = $displayCreated;
        }
    }
    
    public function getDisplayUpdated(): bool
    {
        return $this->displayUpdated;
    }
    
    public function setDisplayUpdated(bool $displayUpdated): void
    {
        if ((bool) $this->displayUpdated !== $displayUpdated) {
            $this->displayUpdated = $displayUpdated;
        }
    }
    
    public function getDisplayTextInfo(): bool
    {
        return $this->displayTextInfo;
    }
    
    public function setDisplayTextInfo(bool $displayTextInfo): void
    {
        if ((bool) $this->displayTextInfo !== $displayTextInfo) {
            $this->displayTextInfo = $displayTextInfo;
        }
    }
    
    public function getDisplayPrint(): bool
    {
        return $this->displayPrint;
    }
    
    public function setDisplayPrint(bool $displayPrint): void
    {
        if ((bool) $this->displayPrint !== $displayPrint) {
            $this->displayPrint = $displayPrint;
        }
    }
    
    public function getSlug(): ?string
    {
        return $this->slug;
    }
    
    public function setSlug(?string $slug = null): void
    {
        if ($this->slug !== $slug) {
            $this->slug = $slug;
        }
    }
    
    public function getCategories(): ?Collection
    {
        return $this->categories;
    }
    
    /**
     * Sets the categories.
     */
    public function setCategories(Collection $categories): void
    {
        foreach ($this->categories as $category) {
            if (false === ($key = $this->categoryCollectionContains($categories, $category))) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @return bool|int
     */
    private function categoryCollectionContains(Collection $collection, \Zikula\PagesModule\Entity\PageCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \Zikula\PagesModule\Entity\PageCategoryEntity $category */
            if (
                $category->getCategoryRegistryId() === $element->getCategoryRegistryId()
                && $category->getCategory() === $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(bool $forEditing = false): array
    {
        if (true === $forEditing) {
            return [
                'id' => $this->getId(),
                'slug' => $this->getSlug(),
            ];
        }
    
        return [
            'slug' => $this->getSlug(),
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     */
    public function supportsHookSubscribers(): bool
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     */
    public function getHookAreaPrefix(): string
    {
        return 'zikulapagesmodule.ui_hooks.pages';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Page ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
